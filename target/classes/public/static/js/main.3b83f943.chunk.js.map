{"version":3,"sources":["components/landingpage.js","components/hello.js","components/navigation.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["LandingPage","props","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","console","log","state","axios","post","then","response","catch","error","id","salary","this","className","onSubmit","style","color","type","title","onChange","Component","Hello","hello","fetch","text","message","setInterval","src","logo","alt","FirstComponent","SecondComponent","ThirdComponent","Navigation","exact","path","component","App","fixedHeader","scroll","waterfall","seamed","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.3b83f943.chunk.js","sourcesContent":["// All the rest of the content of the landing page is coming from \nimport React, {Component} from 'react';\nimport {List, ListItem} from 'react-mdl';\nimport logo from '../logo.svg';\nimport axios from 'axios';\n\nimport '../App.css';\n\nclass LandingPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id : '',\n            name : '',\n            salary : ''\n        }\n    }\n    changeHandler = (e) => {\n        this.setState({ [e.target.name] : e.target.value })\n    }\n\n    submitHandler = e => {\n        e.preventDefault()\n        console.log(this.state)\n        axios.post('http://localhost:8080/users/add', this.state)\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n/*   componentDidMount() {\n    setInterval(this.hello, 250);\n}\n\nhello = () => {\n    fetch('/')\n        .then(response => response.text())\n        .then(message => {\n            this.setState({message: message});\n        });\n}; */\n\n  render() {\n      const {id,name,salary} = this.state\n      return (\n          <div className=\"landing-form\">\n                {/* <h1 className=\"App-title\">{this.state.message}</h1> */}\n                <form onSubmit = {this.submitHandler}>\n                    <div>\n                        <p style = {{color: 'white'}}>Input ID</p>\n                        <input type = \"text\" name = \"id\" title = \"ID\" value = {id} onChange = {this.changeHandler}/>\n                    </div>\n                    <div>\n                        <p style = {{color: 'white'}}>Input Name</p>\n                        <input type = \"text\" name = \"name\" title = \"Name\" value = {name} onChange = {this.changeHandler}/>\n                    </div>\n                    <div>\n                        <p style = {{color: 'white'}}>Input Salary</p>\n                        <input type = \"text\" name = \"salary\" title = \"Salary\" value = {salary} onChange = {this.changeHandler}/>\n                    </div>\n                    <button type = \"submit\"> Submit </button>\n                </form>\n          </div>\n      );\n  }\n}\n\n//Class Component\nclass FirstComponent extends Component {\n  render() {\n    return (\n      <div className = \"first-component\">\n        My Cradle\n      </div>\n    );\n  }\n}\n\n//Class Component\nclass SecondComponent extends Component {\n  render() {\n    return (\n      <div className = \"second-component\">\n        <List>\n            <ListItem>Bryan Cranston</ListItem>\n            <ListItem>Aaron Paul</ListItem>\n            <ListItem>Bob Odenkirk</ListItem>\n        </List> \n      </div>\n\n    );\n  }\n}\n\n//Function Component\nfunction ThirdComponent() {\n  return (\n    <div className = \"third-component\">\n        This is third component\n    </div>\n  );\n}\n\nexport default LandingPage;\n","// All the rest of the content of the landing page is coming from \nimport React, {Component} from 'react';\nimport {List, ListItem} from 'react-mdl';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nclass Hello extends Component {\n\n  state = {};\n\n  componentDidMount() {\n      setInterval(this.hello, 250);\n  }\n\n  hello = () => {\n      fetch('/users/hello')\n          .then(response => response.text())\n          .then(message => {\n              this.setState({message: message});\n          });\n  };\n\n  render() {\n      return (\n          <div className=\"App\">\n              <header className=\"App-header\">\n                  <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                  <h1 className=\"App-title\">{this.state.message}</h1>\n                  <FirstComponent />\n                  <SecondComponent />\n                  <ThirdComponent />\n              </header>\n              \n          </div>\n      );\n  }\n}\n\n//Class Component\nclass FirstComponent extends Component {\n  render() {\n    return (\n      <div className = \"first-component\">\n        My Cradle\n      </div>\n    );\n  }\n}\n\n//Class Component\nclass SecondComponent extends Component {\n  render() {\n    return (\n      <div className = \"second-component\">\n        My Body \n      </div>\n\n    );\n  }\n}\n\n//Function Component\nfunction ThirdComponent() {\n  return (\n    <div className = \"third-component\">\n        This is third component\n    </div>\n  );\n}\n\nexport default Hello;\n","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport LandingPage from './landingpage';\nimport Hello from './hello';\n\nconst Navigation = () => (\n  <Switch>\n    <Route exact path = \"/\" component = {LandingPage} />\n    <Route path = \"/users/hello\" component = {Hello} />\n  </Switch>\n)\n\nexport default Navigation;","// All the rest of the content of the landing page is coming from \nimport React, {Component} from 'react';\nimport logo from './logo.svg';\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\nimport {Link} from 'react-router-dom';\nimport Nav from './components/navigation';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n          <Layout fixedHeader>\n              <Header className = \"header-color\" title=\"CRADLE\" scroll waterfall seamed>\n                  <Navigation>\n                      <Link to =\"/\">Home</Link>\n                      <Link to =\"/users/hello\">Hello</Link>\n                  </Navigation>\n              </Header>\n              <Drawer title=\"CRADLE\">\n                  <Navigation>\n                      <Link to =\"/\">Home</Link>\n                      <Link to =\"/users/hello\">Hello</Link>\n                  </Navigation>\n              </Drawer>\n              <Content>\n                  <div className=\"page-content\" />\n                  <Nav/>\n              </Content>\n          </Layout>\n      </div>\n    );\n  }\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render( \n    <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n    ); //Get the root element and render the react application you need\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}